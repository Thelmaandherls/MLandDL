"""
Book: https://learning.oreilly.com/library/view/introduction-to-machine/9781449369880/ch01.html#summary
"""
#testing the IDE
#print("Hello")

#Model to asses different features of plants for classification

#Assesing variables 
#!pip install mglearn #plots

from sklearn.datasets import load_iris 
iris_dataset = load_iris()

print("Keys of iris_dataset:\n", iris_dataset.keys())

print(iris_dataset['DESCR'][:193] + "\n...")

print("Target names:", iris_dataset['target_names'])

#dimensions of each data point that is an identifiable value for a plant 
print("Feature names:\n", iris_dataset['feature_names'])

#data = matrix - rows = columns, rows = dimensions
print("Type of data:", type(iris_dataset['data']))

print("Shape of data:", iris_dataset['data'].shape)

print("First five rows of data:\n", iris_dataset['data'][:5])

print("Target of target:", type(iris_dataset['target']))

print("Shape of target:", iris_dataset['target'].shape)

#target data encoded using numbers 
#not best to encode in ordinal way and  implies spatial relationship
#here doens't matter as much as using it to predict and not trian on 
print("Target:\n", iris_dataset['target'])

#picking test and train var rnadomly but seeding random num gene w 0
from sklearn.model_selection import train_test_split

#creating test and training data 
X_train, X_test, y_train, y_test = train_test_split(iris_dataset['data'], iris_dataset['target'], random_state=0)


#observing the shapes of the test and train data
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

#plotting each 2D plots of each pair and histograms of specific values for each d 
import pandas as pd
import mglearn
import numpy as np

iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)
pd.plotting.scatter_matrix(iris_dataframe, c=y_train, figsize=(15, 15), marker='o', hist_kwds={'bins': 20}, s=60, alpha=.8, cmap=mglearn.cm3)

#Using KNN
#not the best as has to retain memory - model is trianing data and comare to trianing data to make prediction 

from sklearn.neighbors import KNeighborsClassifier 

#building the model on the trianing set 
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)

#making predictions using this model on new data
X_new = np.array([[5, 2.9, 1, 0.2]])
print("X_new.shape", X_new.shape)

prediction = knn.predict(X_new)
print("Prediction:", prediction)
print("Predicted target name:", iris_dataset['target_names'][prediction])

#Evaluating the model using the test dataset - a prediction and accuracy 
y_pred = knn.predict(X_test)
print("test set prediction:\n", y_pred)
print("test set score: {:.2f}".format(np.mean(y_pred == y_test)))





